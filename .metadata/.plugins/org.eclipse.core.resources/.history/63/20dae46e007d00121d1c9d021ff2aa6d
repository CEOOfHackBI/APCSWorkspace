import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

/**
 * 
 */

/**
 * @author jack
 *
 */
public class Redo {

	/**
	 * @param args
	 */
	
	
	
	public Queue<Integer> reverseChunks(Queue<Integer> q)
	{
		Queue<Integer> result=new LinkedList<Integer>();
	//	Iterator<Integer> i=q.iterator();
		Stack<Integer> s=new Stack<Integer>();
		
		while(!q.isEmpty())
		{
			Integer next=q.remove();
			
			if(s.isEmpty()||next>s.peek())
			{
				s.push(next);
			}
			else
			{
				while(!s.isEmpty())
				{
					result.add(s.pop());
				}
				s.push(next);
			}
		}
		while(!s.isEmpty())
			result.add(s.pop());
		
		return result;
	}
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		Queue<Integer> q=new LinkedList<Integer>();
		q.add(10);
	}

}
